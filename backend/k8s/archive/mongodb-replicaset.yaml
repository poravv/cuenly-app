apiVersion: v1
kind: Service
metadata:
  name: mongodb
  namespace: cuenly-backend
  labels:
    app: mongodb
    tier: database
spec:
  clusterIP: None
  selector:
    app: mongodb
    tier: database
  ports:
    - name: mongo
      port: 27017
      targetPort: 27017
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: mongodb-pdb
  namespace: cuenly-backend
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: mongodb
      tier: database
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
  namespace: cuenly-backend
  labels:
    app: mongodb
    tier: database
spec:
  serviceName: mongodb
  replicas: 3
  selector:
    matchLabels:
      app: mongodb
      tier: database
  template:
    metadata:
      labels:
        app: mongodb
        tier: database
    spec:
      terminationGracePeriodSeconds: 60
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values: ["mongodb"]
                topologyKey: kubernetes.io/hostname
      containers:
        - name: mongodb
          image: mongo:6.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 27017
              name: mongo
          args:
            - "--replSet"
            - "rs0"
            - "--bind_ip_all"
            - "--auth"
            - "--keyFile"
            - "/etc/secrets/keyfile"
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: cuenly-backend-secrets
                  key: mongodb-root-username
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: cuenly-backend-secrets
                  key: mongodb-root-password
            - name: MONGO_INITDB_DATABASE
              valueFrom:
                secretKeyRef:
                  name: cuenly-backend-secrets
                  key: mongodb-database
          volumeMounts:
            - name: datadir
              mountPath: /data/db
            - name: mongodb-keyfile
              mountPath: /etc/secrets
              readOnly: true
          resources:
            requests:
              memory: "1Gi"
              cpu: "250m"
            limits:
              memory: "2Gi"
              cpu: "1000m"
          livenessProbe:
            tcpSocket:
              port: 27017
            initialDelaySeconds: 60
            periodSeconds: 20
            failureThreshold: 5
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - |
                  mongo --quiet --host 127.0.0.1 --eval 'db.adminCommand({ ping: 1 }).ok' -u "$MONGO_INITDB_ROOT_USERNAME" -p "$MONGO_INITDB_ROOT_PASSWORD" --authenticationDatabase admin | grep -q 1
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 10
      volumes:
        - name: mongodb-keyfile
          secret:
            secretName: mongodb-keyfile
            defaultMode: 0400
  volumeClaimTemplates:
    - metadata:
        name: datadir
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: longhorn
        resources:
          requests:
            storage: 10Gi
---
apiVersion: batch/v1
kind: Job
metadata:
  name: mongodb-rs-init
  namespace: cuenly-backend
spec:
  backoffLimit: 5
  template:
    spec:
      restartPolicy: OnFailure
      containers:
        - name: init-replica-set
          image: mongo:6.0
          command:
            - sh
            - -c
            - |
              set -e
              ROOT_USER=$(printenv MONGO_INITDB_ROOT_USERNAME)
              ROOT_PASS=$(printenv MONGO_INITDB_ROOT_PASSWORD)
              HOST0=mongodb-0.mongodb.cuenly-backend.svc.cluster.local:27017
              HOST1=mongodb-1.mongodb.cuenly-backend.svc.cluster.local:27017
              HOST2=mongodb-2.mongodb.cuenly-backend.svc.cluster.local:27017
              for i in $(seq 1 60); do
                if mongo --quiet --host "$HOST0" --eval 'db.adminCommand({ ping: 1 }).ok' >/dev/null 2>&1; then
                  break
                fi
                sleep 5
              done
              if mongo --quiet --host "$HOST0" -u "$ROOT_USER" -p "$ROOT_PASS" --authenticationDatabase admin --eval 'rs.status().ok' | grep -q 1; then
                exit 0
              fi
              mongo --host "$HOST0" -u "$ROOT_USER" -p "$ROOT_PASS" --authenticationDatabase admin --eval 'rs.initiate({_id:"rs0",members:[{_id:0,host:"'"$HOST0"'"},{_id:1,host:"'"$HOST1"'"},{_id:2,host:"'"$HOST2"'"}]})'
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: cuenly-backend-secrets
                  key: mongodb-root-username
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: cuenly-backend-secrets
                  key: mongodb-root-password

