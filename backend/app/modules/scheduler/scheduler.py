"""
Scheduler para tareas autom√°ticas del sistema CuenlyApp
Maneja el reseteo mensual autom√°tico de l√≠mites de IA
"""

import schedule
import time
import threading
from datetime import datetime
import logging
from app.modules.monthly_reset_service import MonthlyResetService

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class ScheduledTasks:
    """Manejador de tareas programadas autom√°ticas"""
    
    def __init__(self):
        self.monthly_reset_service = MonthlyResetService()
        self.scheduler_thread = None
        self.running = False
    
    def start_background_scheduler(self):
        """Inicia el scheduler en un hilo de background"""
        try:
            # Programar el reseteo para ejecutarse diariamente a las 00:01
            # pero solo se ejecutar√° el d√≠a 1 de cada mes (l√≥gica interna)
            schedule.every().day.at("00:01").do(self._check_and_execute_monthly_reset)
            
            # Iniciar el hilo de background
            self.scheduler_thread = threading.Thread(
                target=self._run_scheduler, 
                daemon=True,
                name="AI-Limits-Scheduler"
            )
            self.scheduler_thread.start()
            self.running = True
            
            logger.info("‚úÖ Scheduler de l√≠mites IA iniciado correctamente")
            logger.info("üìÖ Verificaci√≥n diaria a las 00:01 - Reseteo autom√°tico el d√≠a 1 de cada mes")
            
        except Exception as e:
            logger.error(f"‚ùå Error iniciando scheduler: {str(e)}")
            raise
    
    def _run_scheduler(self):
        """Bucle principal del scheduler que se ejecuta en background"""
        logger.info("üîÑ Hilo de scheduler iniciado en background")
        
        while True:
            try:
                # Verificar si hay jobs pendientes cada minuto
                schedule.run_pending()
                time.sleep(60)  # Revisar cada minuto
                
            except Exception as e:
                logger.error(f"‚ùå Error en el bucle del scheduler: {str(e)}")
                time.sleep(300)  # Esperar 5 minutos antes de reintentar
    
    def _check_and_execute_monthly_reset(self):
        """Verifica si es d√≠a 1 del mes y ejecuta el reseteo mensual"""
        try:
            # Solo ejecutar el d√≠a 1 de cada mes
            if not self.should_run_today():
                logger.debug(f"üìÖ Verificaci√≥n diaria: No es d√≠a 1, saltando reseteo (d√≠a {datetime.now().day})")
                return
            
            logger.info("üöÄ Es d√≠a 1 del mes - Iniciando reseteo mensual autom√°tico de l√≠mites IA")
            
            result = self.monthly_reset_service.reset_monthly_limits()
            
            if result["success"]:
                logger.info(f"‚úÖ Reseteo mensual completado: {result['users_reset']} usuarios reseteados")
            else:
                logger.error(f"‚ùå Error en reseteo mensual: {result.get('error', 'Error desconocido')}")
                
        except Exception as e:
            logger.error(f"‚ùå Excepci√≥n durante reseteo mensual: {str(e)}")
    
    def get_status(self):
        """Obtiene el estado actual del scheduler"""
        try:
            jobs = schedule.jobs
            next_run = None
            
            if jobs:
                # Obtener el pr√≥ximo job programado
                next_run = min(job.next_run for job in jobs) if jobs else None
            
            return {
                "running": self.running and (self.scheduler_thread and self.scheduler_thread.is_alive()),
                "jobs_count": len(jobs),
                "next_run": next_run.isoformat() if next_run else None,
                "thread_alive": self.scheduler_thread.is_alive() if self.scheduler_thread else False
            }
            
        except Exception as e:
            logger.error(f"‚ùå Error obteniendo estado del scheduler: {str(e)}")
            return {
                "running": False,
                "jobs_count": 0,
                "next_run": None,
                "thread_alive": False,
                "error": str(e)
            }
    
    def should_run_today(self):
        """Verifica si el reseteo deber√≠a ejecutarse hoy"""
        today = datetime.now()
        # El reseteo se ejecuta el d√≠a 1 de cada mes
        return today.day == 1
    
    def execute_manual_reset(self):
        """Ejecuta el reseteo mensual manualmente (sin verificar fecha)"""
        try:
            logger.info("üîß Ejecutando reseteo mensual MANUAL (ignorando fecha)")
            
            result = self.monthly_reset_service.reset_monthly_limits()
            
            if result["success"]:
                logger.info(f"‚úÖ Reseteo manual completado: {result['users_reset']} usuarios reseteados")
                return {
                    "success": True,
                    "users_reset": result.get("users_reset", 0),
                    "message": "Reseteo manual ejecutado correctamente"
                }
            else:
                error_msg = result.get('error', 'Error desconocido')
                logger.error(f"‚ùå Error en reseteo manual: {error_msg}")
                return {
                    "success": False,
                    "users_reset": 0,
                    "error": error_msg
                }
                
        except Exception as e:
            error_msg = f"Excepci√≥n durante reseteo manual: {str(e)}"
            logger.error(f"‚ùå {error_msg}")
            return {
                "success": False,
                "users_reset": 0,
                "error": error_msg
            }
    
    def stop_scheduler(self):
        """Detiene el scheduler (para testing o shutdown)"""
        try:
            schedule.clear()
            self.running = False
            logger.info("üõë Scheduler detenido")
            
        except Exception as e:
            logger.error(f"‚ùå Error deteniendo scheduler: {str(e)}")


# Instancia global del scheduler
scheduler_instance = None


def get_scheduler_instance():
    """Obtiene la instancia global del scheduler"""
    global scheduler_instance
    if scheduler_instance is None:
        scheduler_instance = ScheduledTasks()
    return scheduler_instance