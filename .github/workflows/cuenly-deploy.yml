# .github/workflows/cuenly-deploy.yml
name: Unified CI/CD - Backend & Frontend

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'config/**'
      - 'nginx/**'
      - '.github/workflows/cuenly-deploy.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'config/**'
      - 'nginx/**'
  workflow_dispatch:
    inputs:
      deploy_backend:
        description: 'Force deploy backend'
        type: boolean
        default: false
      deploy_frontend:
        description: 'Force deploy frontend'
        type: boolean
        default: false
      environment:
        description: 'Target environment'
        type: choice
        options:
          - development
          - staging
          - production
        default: development

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  BASE_IMAGE_NAME: ${{ github.repository }}
  DOCKER_BUILDKIT: "1"

concurrency:
  group: deploy-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: false

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      config-changed: ${{ steps.changes.outputs.config }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Detect changes
        id: changes
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "backend=${{ github.event.inputs.deploy_backend || 'true' }}" >> $GITHUB_OUTPUT
            echo "frontend=${{ github.event.inputs.deploy_frontend || 'true' }}" >> $GITHUB_OUTPUT
            echo "config=true" >> $GITHUB_OUTPUT
          else
            # Detectar cambios desde el último commit
            if [ "${{ github.event_name }}" == "pull_request" ]; then
              BASE_SHA="${{ github.event.pull_request.base.sha }}"
            else
              BASE_SHA="${{ github.event.before }}"
            fi
            
            # Si es el primer push o no hay commit anterior, comparar con HEAD~1
            if [ "$BASE_SHA" == "0000000000000000000000000000000000000000" ] || [ -z "$BASE_SHA" ]; then
              BASE_SHA="HEAD~1"
            fi
            
            BACKEND_CHANGED=$(git diff --name-only $BASE_SHA HEAD | grep -E '^backend/' > /dev/null && echo "true" || echo "false")
            FRONTEND_CHANGED=$(git diff --name-only $BASE_SHA HEAD | grep -E '^frontend/' > /dev/null && echo "true" || echo "false")
            CONFIG_CHANGED=$(git diff --name-only $BASE_SHA HEAD | grep -E '^config/|^nginx/|^docker-compose.yml' > /dev/null && echo "true" || echo "false")
            
            echo "backend=$BACKEND_CHANGED" >> $GITHUB_OUTPUT
            echo "frontend=$FRONTEND_CHANGED" >> $GITHUB_OUTPUT
            echo "config=$CONFIG_CHANGED" >> $GITHUB_OUTPUT
          fi
          
          echo "🔍 Changes detected:"
          echo "  Backend: $(grep 'backend=' $GITHUB_OUTPUT | cut -d'=' -f2)"
          echo "  Frontend: $(grep 'frontend=' $GITHUB_OUTPUT | cut -d'=' -f2)"
          echo "  Config: $(grep 'config=' $GITHUB_OUTPUT | cut -d'=' -f2)"

  build-backend:
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true'
    runs-on: self-hosted
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,format=short
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.description=CuenlyApp Backend API
            
      - name: Build and push backend image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=backend
          cache-to: type=gha,mode=max,scope=backend
          platforms: linux/amd64

  build-frontend:
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    runs-on: self-hosted
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:

      - uses: actions/checkout@v4
      
      # ✅ NUEVO: Generar environments con secretos
      - name: Generate environment files with secrets
        run: |
          mkdir -p frontend/src/environments
          
          # Generar environment.ts
          cat > frontend/src/environments/environment.ts << 'EOF'
          export const environment = {
            production: false,
            apiUrl: '',
            firebase: {
              apiKey: "${{ secrets.FIREBASE_API_KEY }}",
              authDomain: "${{ secrets.FIREBASE_AUTH_DOMAIN }}",
              projectId: "${{ secrets.FIREBASE_PROJECT_ID }}",
              storageBucket: "${{ secrets.FIREBASE_STORAGE_BUCKET }}",
              messagingSenderId: "${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}",
              appId: "${{ secrets.FIREBASE_APP_ID }}",
              measurementId: "${{ secrets.FIREBASE_MEASUREMENT_ID }}"
            }
          };
          EOF
          
          # Generar environment.prod.ts
          cat > frontend/src/environments/environment.prod.ts << 'EOF'
          export const environment = {
            production: true,
            apiUrl: '',
            firebase: {
              apiKey: "${{ secrets.FIREBASE_API_KEY }}",
              authDomain: "${{ secrets.FIREBASE_AUTH_DOMAIN }}",
              projectId: "${{ secrets.FIREBASE_PROJECT_ID }}",
              storageBucket: "${{ secrets.FIREBASE_STORAGE_BUCKET }}",
              messagingSenderId: "${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}",
              appId: "${{ secrets.FIREBASE_APP_ID }}",
              measurementId: "${{ secrets.FIREBASE_MEASUREMENT_ID }}"
            }
          };
          EOF
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,format=short
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.description=CuenlyApp Frontend Application
            
      - name: Build and push frontend image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=frontend
          cache-to: type=gha,mode=max,scope=frontend
          platforms: linux/amd64

  deploy-backend:
    needs: [detect-changes, build-backend]
    if: always() && (needs.detect-changes.outputs.backend-changed == 'true' || needs.detect-changes.outputs.config-changed == 'true') && (needs.build-backend.result == 'success' || needs.build-backend.result == 'skipped')
    runs-on: self-hosted
    environment: ${{ github.event.inputs.environment || 'development' }}
    env:
      NAMESPACE: cuenly-backend
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup kubectl context
        run: |
          kubectl config current-context
          
      - name: Ensure namespace exists
        run: |
          kubectl get ns ${{ env.NAMESPACE }} || kubectl create ns ${{ env.NAMESPACE }}
          
      - name: Create/Update image pull secret
        run: |
          kubectl create secret docker-registry ghcr-secret \
            --docker-server=${{ env.REGISTRY }} \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GHCR_PAT }} \
            --namespace=${{ env.NAMESPACE }} \
            --dry-run=client -o yaml | kubectl apply -f -
            
      - name: Create/Update backend secrets
        run: |
          set -euo pipefail
          kubectl delete secret backend-env-secrets -n ${{ env.NAMESPACE }} --ignore-not-found=true
          kubectl create secret generic backend-env-secrets \
            --namespace=${{ env.NAMESPACE }} \
            --from-literal=MONGODB_URL="${{ secrets.MONGODB_URL }}" \
            --from-literal=MONGODB_DATABASE="${{ secrets.MONGODB_DATABASE }}" \
            --from-literal=MONGODB_COLLECTION="${{ secrets.MONGODB_COLLECTION }}" \
            --from-literal=OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
            --from-literal=API_HOST="${{ secrets.API_HOST }}" \
            --from-literal=API_PORT="${{ secrets.API_PORT }}" \
            --from-literal=LOG_LEVEL="${{ secrets.LOG_LEVEL }}" \
            --from-literal=TEMP_PDF_DIR="${{ secrets.TEMP_PDF_DIR }}" \
            --from-literal=JOB_INTERVAL_MINUTES="${{ secrets.JOB_INTERVAL_MINUTES }}" \
            --from-literal=AUTH_REQUIRE="${{ secrets.AUTH_REQUIRE }}" \
            --from-literal=FIREBASE_PROJECT_ID="${{ secrets.FIREBASE_PROJECT_ID }}" \
            --from-literal=MULTI_TENANT_ENFORCE="${{ secrets.MULTI_TENANT_ENFORCE }}"
            
      - name: Create/Update MongoDB secrets
        run: |
          set -euo pipefail
          kubectl delete secret cuenly-backend-secrets -n ${{ env.NAMESPACE }} --ignore-not-found=true
          kubectl create secret generic cuenly-backend-secrets \
            --namespace=${{ env.NAMESPACE }} \
            --from-literal=mongodb-root-username="${{ secrets.MONGODB_ROOT_USERNAME }}" \
            --from-literal=mongodb-root-password="${{ secrets.MONGODB_ROOT_PASSWORD }}" \
            --from-literal=mongodb-database="${{ secrets.MONGODB_DATABASE }}"
            
          # Generar keyfile de MongoDB automáticamente
          echo "🔑 Generando keyfile de MongoDB..."
          MONGODB_KEYFILE=$(openssl rand -base64 756 | tr -d '\n')
          echo "Keyfile generado con $(echo -n "$MONGODB_KEYFILE" | wc -c) caracteres"
          
          # Crear archivo temporal y secret
          echo "$MONGODB_KEYFILE" > /tmp/mongodb-keyfile.txt
          kubectl delete secret mongodb-keyfile -n ${{ env.NAMESPACE }} --ignore-not-found=true
          kubectl create secret generic mongodb-keyfile \
            --namespace=${{ env.NAMESPACE }} \
            --from-file=keyfile=/tmp/mongodb-keyfile.txt
          rm -f /tmp/mongodb-keyfile.txt
          echo "✅ Secret mongodb-keyfile creado correctamente"
            
      - name: Deploy MongoDB
        run: |
          set -euo pipefail
          kubectl apply -f backend/k8s/mongodb-replicaset.yaml -n ${{ env.NAMESPACE }}
          kubectl rollout status statefulset/mongodb -n ${{ env.NAMESPACE }} --timeout=600s
          kubectl wait --for=condition=ready pod -l app=mongodb -n ${{ env.NAMESPACE }} --timeout=600s
          
      - name: Apply NetworkPolicies
        run: |
          kubectl apply -f backend/k8s/networkpolicy-mongodb.yaml -n ${{ env.NAMESPACE }}
          kubectl apply -f backend/k8s/networkpolicy-backend.yaml -n ${{ env.NAMESPACE }}
          
      - name: Create MongoDB app user
        run: |
          set -euo pipefail
          kubectl apply -f backend/k8s/mongodb-appuser-job.yaml -n ${{ env.NAMESPACE }}
          kubectl wait --for=condition=complete job/mongodb-appuser -n ${{ env.NAMESPACE }} --timeout=300s
          
      - name: Deploy backend application
        run: |
          set -euo pipefail
          kubectl apply -f backend/k8s/deployment.yaml -n ${{ env.NAMESPACE }}
          SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          kubectl set image deployment/cuenly-backend cuenly-backend=${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-backend:sha-${SHORT_SHA} -n ${{ env.NAMESPACE }}
          kubectl rollout status deployment/cuenly-backend -n ${{ env.NAMESPACE }} --timeout=300s
          
      - name: Deploy backend ingress
        run: |
          kubectl apply -f backend/k8s/ingress.yaml -n ${{ env.NAMESPACE }}
          
      - name: Backend health check
        run: |
          set -euo pipefail
          BACKEND_IP=$(kubectl get svc cuenly-backend-service -n ${{ env.NAMESPACE }} -o jsonpath='{.spec.clusterIP}')
          for i in $(seq 1 12); do
            if curl -fsS "http://${BACKEND_IP}:8000/health" > /dev/null; then
              echo "✅ Backend healthy"; break; fi
            echo "Attempt $i/12 failed; retrying in 10s..."; sleep 10
            if [ $i -eq 12 ]; then echo "❌ Backend health check failed"; exit 1; fi
          done

  deploy-frontend:
    needs: [detect-changes, build-frontend]
    if: always() && (needs.detect-changes.outputs.frontend-changed == 'true' || needs.detect-changes.outputs.config-changed == 'true') && (needs.build-frontend.result == 'success' || needs.build-frontend.result == 'skipped')
    runs-on: self-hosted
    environment: ${{ github.event.inputs.environment || 'development' }}
    env:
      NAMESPACE: cuenly-frontend
    steps:
      - uses: actions/checkout@v4
      
      - name: Ensure namespace exists
        run: |
          kubectl apply -f frontend/k8s/namespace.yaml
          
      - name: Create/Update image pull secret
        run: |
          kubectl create secret docker-registry ghcr-secret \
            --docker-server=${{ env.REGISTRY }} \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GHCR_PAT }} \
            --namespace=${{ env.NAMESPACE }} \
            --dry-run=client -o yaml | kubectl apply -f -
            
      - name: Deploy frontend infrastructure
        run: |
          kubectl apply -f frontend/k8s/configmap.yaml -n ${{ env.NAMESPACE }}
          kubectl apply -f frontend/k8s/networkpolicy.yaml -n ${{ env.NAMESPACE }}
          kubectl apply -f frontend/k8s/ingress.yaml -n ${{ env.NAMESPACE }}
          
      - name: Deploy frontend application
        run: |
          kubectl apply -f frontend/k8s/deployment.yaml -n ${{ env.NAMESPACE }}
          kubectl set image deployment/cuenly-frontend cuenly-frontend=${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-frontend@${{ needs.build-frontend.outputs.image-digest }} -n ${{ env.NAMESPACE }}
          kubectl rollout status deployment/cuenly-frontend -n ${{ env.NAMESPACE }} --timeout=600s
          
      - name: Frontend health check
        run: |
          sleep 10
          FRONTEND_IP=$(kubectl get service cuenly-frontend-service -n ${{ env.NAMESPACE }} -o jsonpath='{.spec.clusterIP}')
          for i in {1..10}; do
            if curl -f http://$FRONTEND_IP/ > /dev/null 2>&1; then
              echo "✅ Frontend health check passed"; break; fi
            echo "Attempt $i failed, retrying in 10 seconds..."; sleep 10
            if [ $i -eq 10 ]; then
              echo "❌ Frontend health check failed after 10 attempts"
              kubectl logs deployment/cuenly-frontend -n ${{ env.NAMESPACE }} --tail=50
              exit 1
            fi
          done

  deployment-summary:
    needs: [detect-changes, deploy-backend, deploy-frontend]
    if: always()
    runs-on: self-hosted
    steps:
      - name: Summary
        run: |
          echo "🎯 Deployment Summary"
          echo "=================="
          echo "Backend changed: ${{ needs.detect-changes.outputs.backend-changed }}"
          echo "Frontend changed: ${{ needs.detect-changes.outputs.frontend-changed }}"
          echo "Config changed: ${{ needs.detect-changes.outputs.config-changed }}"
          echo "Backend deployment: ${{ needs.deploy-backend.result || 'skipped' }}"
          echo "Frontend deployment: ${{ needs.deploy-frontend.result || 'skipped' }}"
          echo ""
          echo "📋 Cluster Status:"
          kubectl get pods -n cuenly-backend -o wide || echo "No backend pods"
          kubectl get pods -n cuenly-frontend -o wide || echo "No frontend pods"
          echo ""
          echo "🌐 Services:"
          kubectl get svc -n cuenly-backend || echo "No backend services"
          kubectl get svc -n cuenly-frontend || echo "No frontend services"