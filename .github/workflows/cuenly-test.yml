# .github/workflows/cuenly-test.yml
name: Test & Build - Development Branches

on:
  push:
    branches-ignore: [ main, master ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'config/**'
      - 'nginx/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, master, develop ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'config/**'
      - 'nginx/**'

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  BASE_IMAGE_NAME: ${{ github.repository }}
  DOCKER_BUILDKIT: "1"

concurrency:
  group: test-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      config-changed: ${{ steps.changes.outputs.config }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Detect changes
        id: changes
        run: |
          # Detectar cambios desde el último commit
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
          else
            BASE_SHA="${{ github.event.before }}"
          fi
          
          # Si es el primer push o no hay commit anterior, comparar con HEAD~1
          if [ "$BASE_SHA" == "0000000000000000000000000000000000000000" ] || [ -z "$BASE_SHA" ]; then
            BASE_SHA="HEAD~1"
          fi
          
          # Obtener lista de archivos cambiados
          CHANGED_FILES=$(git diff --name-only $BASE_SHA HEAD)
          echo "📁 Archivos cambiados:"
          echo "$CHANGED_FILES"
          
          # Detectar cambios en backend
          BACKEND_CHANGED=$(echo "$CHANGED_FILES" | grep -E '^backend/' > /dev/null && echo "true" || echo "false")
          
          # Detectar cambios en frontend
          FRONTEND_CHANGED=$(echo "$CHANGED_FILES" | grep -E '^frontend/' > /dev/null && echo "true" || echo "false")
          
          # Detectar cambios en config global
          CONFIG_CHANGED=$(echo "$CHANGED_FILES" | grep -E '^config/|^nginx/|^docker-compose.yml|\.github/workflows/' > /dev/null && echo "true" || echo "false")
          
          echo "backend=$BACKEND_CHANGED" >> $GITHUB_OUTPUT
          echo "frontend=$FRONTEND_CHANGED" >> $GITHUB_OUTPUT
          echo "config=$CONFIG_CHANGED" >> $GITHUB_OUTPUT
          
          echo "🔍 Changes detected:"
          echo "  Backend: $BACKEND_CHANGED"
          echo "  Frontend: $FRONTEND_CHANGED"
          echo "  Config: $CONFIG_CHANGED"

  test-backend:
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true' || needs.detect-changes.outputs.config-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          cd backend
          pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run backend tests
        run: |
          cd backend
          # Aquí puedes agregar tus tests de backend
          echo "✅ Backend tests passed"
          
      - name: Test Docker build
        run: |
          echo "🔨 Testing backend Docker build..."
          docker build -t test-backend ./backend
          echo "✅ Backend Docker build successful"

  test-frontend:
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true' || needs.detect-changes.outputs.config-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Generate environment files
        run: |
          mkdir -p frontend/src/environments
          
          # Generar environment.ts para testing
          cat > frontend/src/environments/environment.ts << 'EOF'
          export const environment = {
            production: false,
            apiUrl: '',
            firebase: {
              apiKey: "test-api-key",
              authDomain: "test.firebaseapp.com",
              projectId: "test-project",
              storageBucket: "test.appspot.com",
              messagingSenderId: "123456789",
              appId: "1:123456789:web:test",
              measurementId: "G-TEST123"
            }
          };
          EOF
          
          # Generar environment.prod.ts para testing
          cp frontend/src/environments/environment.ts frontend/src/environments/environment.prod.ts
          
      - name: Install dependencies
        run: |
          cd frontend
          # Intentar npm ci primero, si falla usar npm install
          npm ci || npm install
          
      - name: Run frontend tests
        run: |
          cd frontend
          # npm run test -- --watch=false --browsers=ChromeHeadless
          echo "✅ Frontend tests passed"
          
      - name: Build frontend
        run: |
          cd frontend
          npm run build --prod
          echo "✅ Frontend build successful"
          
      - name: Test Docker build
        run: |
          echo "🔨 Testing frontend Docker build..."
          docker build -f ./frontend/Dockerfile.proxy -t test-frontend ./frontend
          echo "✅ Frontend Docker build successful"

  test-summary:
    needs: [detect-changes, test-backend, test-frontend]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Test Summary
        run: |
          echo "🧪 Test Summary"
          echo "==============="
          echo "Branch: ${{ github.ref_name }}"
          echo "Backend changed: ${{ needs.detect-changes.outputs.backend-changed }}"
          echo "Frontend changed: ${{ needs.detect-changes.outputs.frontend-changed }}"
          echo "Config changed: ${{ needs.detect-changes.outputs.config-changed }}"
          echo "Backend tests: ${{ needs.test-backend.result || 'skipped' }}"
          echo "Frontend tests: ${{ needs.test-frontend.result || 'skipped' }}"
          echo ""
          if [ "${{ needs.test-backend.result }}" == "failure" ] || [ "${{ needs.test-frontend.result }}" == "failure" ]; then
            echo "❌ Some tests failed"
            exit 1
          else
            echo "✅ All tests passed!"
          fi